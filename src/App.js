import React, { useState, useEffect } from 'react';
import { SendHorizontal } from 'lucide-react';
import axios from 'axios';
import ChatHistory from './ChatHistory';
import ReactMarkdown from 'react-markdown';

const App = () => {
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [history, setHistory] = useState([]);

  // Load chat history from localStorage
  useEffect(() => {
    const storedHistory = JSON.parse(localStorage.getItem('chatSessions')) || [];
    setHistory(storedHistory);
  }, []);

  // Save chat history
  useEffect(() => {
    if (messages.length > 0) {
      const updatedHistory = [...history];
      updatedHistory[updatedHistory.length - 1] = { messages, timestamp: new Date().toLocaleString() };
      setHistory(updatedHistory);
      localStorage.setItem('chatSessions', JSON.stringify(updatedHistory));
    }
  }, [messages, history]);

  // Create a new chat
  const createNewChat = () => {
    setMessages([]);
    const newChat = { messages: [], timestamp: new Date().toLocaleString() };
    const updatedHistory = [...history, newChat];
    setHistory(updatedHistory);
    localStorage.setItem('chatSessions', JSON.stringify(updatedHistory));
  };

  // Load previous chat
  const loadChat = (index) => {
    setMessages(history[index].messages);
  };

  const handleSend = async () => {
    if (input.trim()) {
      const newMessages = [...messages, { text: input, sender: 'user' }];
      setMessages(newMessages);
      setInput('');
      setLoading(true);
  
      try {
        const response = await axios.post(
          'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent',
          {

            contents: [{ parts: [{ text:input}] }],
            generationConfig: {
              responseModalities: ['Text', 'Image'], // Request both text and image
            },
          },
          {
            headers: { 'Content-Type': 'application/json' },
            params: { key: 'AIzaSyDo18zzrWy2jtyJO4ww1JkCs5oZzp4Doxc' }, // Replace with your actual API key
          }
        );
  
        const aiText = response?.data?.candidates?.[0]?.content?.parts?.find(part => part.text)?.text || 'No response';
        const imageData = response?.data?.candidates?.[0]?.content?.parts?.find(part => part.inline_data)?.inline_data?.data || '';
  
        setMessages((prev) => [
          ...prev,
          { text: aiText, sender: 'ai' },
          ...(imageData ? [{ image: `data:image/png;base64,${imageData}`, sender: 'ai' }] : [])
        ]);
      } catch (error) {
        console.error('Error:', error);
        setMessages((prev) => [...prev, { text: 'Failed to generate portfolio. Please try again.', sender: 'ai' }]);
      } finally {
        setLoading(false);
      }
    }
  };
  

  return (
    <div className="flex min-h-screen">
      {/* Chat History Sidebar */}
      <ChatHistory history={history} loadChat={loadChat} createNewChat={createNewChat} />

      {/* Chat Interface */}
      <div className="flex-1 bg-gradient-to-br from-purple-950 to-purple-800 flex flex-col justify-between text-white p-6 overflow-hidden">
  {/* Chat Messages Area */}
  <div className="flex-1 w-full overflow-y-auto p-4" style={{ maxHeight: 'calc(100vh - 140px)' }}>
    {messages.map((msg, index) => (
      <div key={index} className={`mb-4 text-lg ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>
      {msg.image ? (
        <img src={msg.image} alt="Generated by AI" className="rounded-lg max-w-full" />
      ) : (
        <span className={`${msg.sender === 'user' ? 'bg-purple-700' : 'bg-purple-800'} p-3 rounded-xl inline-block break-words overflow-hidden max-w-full`}>
          {msg.sender === 'ai' ? <ReactMarkdown>{msg.text}</ReactMarkdown> : msg.text}
        </span>
      )}
    </div>
    
    
    ))}
    {loading && (
      <div className="flex justify-center mt-4">
        <div className="w-8 h-8 border-4 border-white border-t-transparent rounded-full animate-spin"></div>
      </div>
    )}
  </div>

  {/* Input Section */}
  <div className="flex items-center w-full p-4">
    <input
      className="flex-1 p-3 border rounded-xl outline-none bg-purple-950 text-white placeholder-gray-400"
      type="text"
      placeholder="Describe your portfolio..."
      value={input}
      onChange={(e) => setInput(e.target.value)}
      onKeyDown={(e) => e.key === 'Enter' && handleSend()}
    />
    <button onClick={handleSend} className="ml-3 bg-purple-700 text-white p-3 rounded-xl">
      <SendHorizontal size={20} />
    </button>
  </div>
</div>

    </div>
  );
};

export default App;
